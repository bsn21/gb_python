# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя,
# например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число)
# и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NotInteger(Exception):
    def __init__(self, text):
        self.text = text


int_list = []
print('Заполним список числами (все, кроме чисел, будет игнорироваться.')
print('Для завершения, введите "stop".')
while True:
    num = input('Введите число: ')
    if num.lower() == 'stop':
        print(f'Программа завершена.\nСписок: {int_list}')
        break
    try:
        if num.isdigit():
            print(f'Число {num} успешно добавлено.\n')
            int_list.append(int(num))
        else:
            raise NotInteger('Значение проигнорировано!')
    except NotInteger as err:
        print(err.text)