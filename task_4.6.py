# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание,
# что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

import sys, itertools

# # 1) вариант - с реализацией скрипта c параметрами (для этого после названия файла ввести count или cycle)
# command = sys.argv[1]
#
# if command == 'count':
#     for el in itertools.count(3):
#         if el > 10:
#             break
#         print(el)
# elif command == 'cycle':
#     my_fruits = ['apple', 'orange', 'banana', 'melon', 'pear']
#     n = 1
#     for el in itertools.cycle(my_fruits):
#         if n > 10:
#             break
#         print(el)
#         n += 1

# 2) вариант - скрипт без параметров, с выходом через ввод специального символа (q) или выход если количество > 10
print('Программа генерирует целые числа, начиная с указанного до момента, '\
      'когда число станет больше 10 или если введен символ q.\nДля генерации следующего числа необходимо'\
      'нажать Enter, а для выхода из цикла - нажать q')

for el in itertools.count(int(input('Введите стартовое число: '))):
    if el > 10:
        break
    print(el, end='')
    quit = input()
    if quit == 'q':
        break

print('Программа повторяет элементы списка до момента, когда введен символ q.'\
    '\nДля генерации следующего числа необходимо нажать Enter, а для выхода из цикла - нажать q')

my_list = input('Введите список, разделяя элементы пробелами: ').split()
my_iter = itertools.cycle(my_list)
quit = None

while quit != 'q':
    print(next(my_iter), end='')
    quit = input()
